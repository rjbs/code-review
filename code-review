#!/usr/bin/env perl
use 5.36.0;
use utf8;

binmode *STDOUT, ':encoding(UTF-8)';
binmode *STDERR, ':encoding(UTF-8)';

use Getopt::Long::Descriptive;
use String::ShellQuote;

use Yakker::Util qw(activityloop matesay);
use Yakker::HTTP;

use lib 'lib';
require RJBS::CodeReview;

$|++;

my @orig_argv = @ARGV;

my ($opt, $usage) = describe_options(
  '%c %o [PROJECT...]',
  [ 'rebuild'      => "rebuild the YAML file that holds state" ],
  [ 'message|m=s'  => "commit message"                         ],
  [ 'pauseid=s'    => "your PAUSE id",  { default => uc $ENV{USER} } ],
  [ 'githubid=s'   => "your GitHub id", { default =>    $ENV{USER} } ],
  [ 'tmux!'        => 'ensure running under tmux', { default => 1 } ],
  [ 'local-cpan=s' => "where's your local cpan?", { default =>
      "$ENV{HOME}/minicpan/modules/02packages.details.txt.gz" },
  ],

  [],

  [ 'rules=s'      => 'comma-separated set of skip/include names',
                      { default => 'noaliens,noorphans' } ],

  [],
  [ \<<~'END' ],
      --rules takes a comma-separated list of the following:

      noaliens  - skip CPAN dists where you have no permissions
      noorphans - skip CPAN dists where ADOPTME is first-come

      Default value: noaliens,noorphans
  END
);

my %rules;
for my $rule (split /\s*,\s*/, $opt->rules) {
  die "unknown rule in --rules: $rule\n"
    unless $rule eq 'noaliens' or $rule eq 'noorphans';

  $rules{$rule} = 1;
}

die "--message without --rebuild or --project is nonsensical"
  if $opt->message and not ($opt->rebuild or $opt->project);

if ($opt->tmux && ! $ENV{TMUX} && ! $opt->rebuild) {
  exec {'tmux'} 'tmux', 'new-session', '-n', 'code-review', "$^X $0 " . shell_quote(@orig_argv);
  die "Tried to exec tmux but we're still here.  What?!\n";
}

my $mate = RJBS::CodeReview->new({
  http_agent => Yakker::HTTP->new,
  github_id  => $opt->githubid,
  pause_id   => $opt->pauseid,
});

activityloop(
  $mate->activity(boot => {
    filter_list  => \@ARGV,
    filter_rules => \%rules,
    rebuild_only => $opt->rebuild ? 1 : 0
  })
);

say q{};
matesay("Good job reviewing!");

exit;
