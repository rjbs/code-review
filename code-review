#!/usr/bin/env perl
use 5.18.0;
use warnings;

binmode *STDOUT, ':encoding(UTF-8)';
binmode *STDERR, ':encoding(UTF-8)';

use lib '/Users/rjbs/fm/code/LP-Tools/lib';

use DateTime;
use DateTime::Format::Strptime;
use Getopt::Long::Descriptive;
use JSON::MaybeXS;
use List::AllUtils qw(part uniq);
use LWP::UserAgent;
use MetaCPAN::Client;
use Parse::CPAN::Packages::Fast;
use String::ShellQuote;
use Term::ReadKey ();
use Time::Duration::Parse;
use YAML::XS ();

$|++;

my @orig_argv = @ARGV;

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'rebuild'      => "rebuild the YAML file that holds state" ],
  [ 'project|p=s'  => "project to mark reviewed"               ],
  [ 'message|m=s'  => "commit message"                         ],
  [ 'pauseid=s'    => "your PAUSE id",  { default => uc $ENV{USER} } ],
  [ 'githubid=s'   => "your GitHub id", { default =>    $ENV{USER} } ],
  [ 'tmux!'        => 'ensure running under tmux', { default => 1 } ],
  [ 'local-cpan=s' => "where's your local cpan?", { default =>
      "$ENV{HOME}/minicpan/modules/02packages.details.txt.gz" },
  ]
);

die "--message without --rebuild or --project is nonsensical"
  if $opt->message and not ($opt->rebuild or $opt->project);

if ($opt->tmux && ! $ENV{TMUX}) {
  exec {'tmux'} 'tmux', 'new-session', '-n', 'code-review', "$^X $0 " . shell_quote(@ARGV);
  die "Tried to exec tmux but we're still here.  What?!\n";
}

my $JSON = JSON::MaybeXS->new->pretty->canonical;

my $mcpan = MetaCPAN::Client->new;

my $saved = YAML::XS::LoadFile('code-review.yaml');

my $p = Parse::CPAN::Packages::Fast->new($opt->local_cpan);

my %is_tracked
  = map {; $_ => scalar(($saved->{$_}{review} // '') ne 'never') }
    keys %$saved;

my $dist = {};

my $ua    = LWP::UserAgent->new(keep_alive => 5);

my $gh_ua = LWP::UserAgent->new(keep_alive => 5);
   $gh_ua->default_header('Authorization' => "token $ENV{GITHUB_OAUTH_TOKEN}");

DIST: for my $d (
  sort { fc $a->dist cmp fc $b->dist } $p->latest_distributions
) {
  next unless $d->cpanid eq $opt->pauseid;
  next if $d->dist eq 'perl';

  $dist->{ $d->dist } = $d;
  $is_tracked{ $d->dist } = 1 unless exists $is_tracked{ $d->dist };
}

my @projects = grep {; $is_tracked{$_} } keys %is_tracked;

my $strp = DateTime::Format::Strptime->new(
  pattern   => '%F',
  locale    => 'en_US',
  time_zone => 'local',
);

my ($undue, $due) = part {
  return 0 unless my $rev = $saved->{$_}{'review-every'};
  die "can't parse duration $rev\n" unless my $dur = parse_duration($rev);
  return 1 if ! $saved->{$_}{'last-review'};
  my $last_done = $strp->parse_datetime($saved->{$_}{'last-review'})->epoch;
  return 1 if time - $last_done > $dur;
  return 0;
} @projects;

@projects = (@{ $due // [] }, sort {
  ($saved->{$a}{'last-review'} // '0') cmp ($saved->{$b}{'last-review'} // 0)
  ||
  fc $a cmp fc $b
} @$undue);

if (@ARGV) {
  my @missing = grep {; ! ($is_tracked{$_} or $saved->{$_}) } @ARGV;
  die "these projects that you asked about are unknown: @missing\n"
    if @missing;
  @projects = @ARGV;
}

if (my $project = $opt->project) {
  die "project $project is not tracked\n" unless $is_tracked{ $project };
  $saved->{$project}{'last-review'}
    = DateTime->now(time_zone => 'local')->format_cldr('yyyy-MM-dd');
}

if ($opt->project) {
  do_review($opt->project, $opt->message);
  exit;
} elsif ($opt->rebuild) {
  do_review(undef, $opt->message);
  exit;
}

use lib 'lib';
require RJBS::CodeReview;
use CliM8::Util qw(activityloop matesay);
use CliM8::HTTP;

our $http = CliM8::HTTP->new;

my $mate = RJBS::CodeReview->new({
  http_agent => $http,
});

activityloop($mate->activity(boot => { projects => \@projects }));

say q{};
matesay("Good job reviewing!");

exit;

sub mark_reviewed {
  my ($name, $message) = @_;
  $saved->{$name}{'last-review'} = DateTime->now(time_zone => 'local')
                                           ->format_cldr('yyyy-MM-dd');

  do_review($name, $message);
}

sub do_review {
  my ($project, $message) = @_;

  my %dump = map {; $_ => {
    ($saved->{$_}{home}   ? (home => $saved->{$_}{home})     : ()),
    ($saved->{$_}{review} ? (review => $saved->{$_}{review}) : ()),
    ($saved->{$_}{'last-review'}
    ? ('last-review' => $saved->{$_}{'last-review'})
    : ()),
    ($saved->{$_}{'review-every'}
    ? ('review-every' => $saved->{$_}{'review-every'})
    : ()),
  } } uniq(@projects, keys %$saved);

  YAML::XS::DumpFile('code-review.yaml', \%dump);

  system(qw(git add code-review.yaml)) and die "git-add failed\n";
  my $msg = $message
          || ($project ? "did review of $project"
                       : "rebuilt code-review state file");

  my $gh_user = $opt->githubid;
  open my $mkdn, '>', 'code-review.mkdn' or die "can't open mkdn: $!";

  print {$mkdn} <<END_HEADER;
This file is computer-generated for humans to read.  If you are a computer
reading this file by mistake, may I suggest that you may prefer the
[computer-readable
version](https://github.com/$gh_user/misc/blob/master/code-review.yaml) instead.
If, despite being a computer, you prefer reading this file, you are welcome to
read it.  Be advised, though, that its format may change in the future.

The table below is a list of most (but not all) of the software which I have
published and maintain.  Most of these projects are CPAN distributions.  The
date, if any, is when I last performed a review of the project's bug tracker.
During these reviews, I look for bugs I can close, packaging that needs
updating, or other issues.  A review does not necessarily close all the open
issues with a project.

Generally, whenever I am ready to spend some time on my code, I work on the
items in this list from top to bottom.  Once I've worked on an item, it moves
to the bottom of the list.

You can read [the program that generates this
file](https://github.com/$gh_user/misc/blob/master/code-review) if you like.

| PROJECT NAME                            | LAST REVIEW
| --------------------------------------- | -------------
END_HEADER

  printf {$mkdn} "| %-40s| %s\n", $_, $saved->{$_}{'last-review'} // '-'
    for sort {
      ($saved->{$a}{'last-review'} // '0') cmp ($saved->{$b}{'last-review'} // 0)
      ||
      fc $a cmp fc $b } @projects;

  close $mkdn or die "error closing mkdn: $!";

  system(qw(git add), <code-review.*>) and die "git-add failed\n";

  my $lines = `git diff --staged`;
  chomp $lines;
  unless (length $lines) {
    say "No changes to commit";
    return;
  }

  system(qw(git commit -m), $msg)  and die "git-commit failed\n";
}

sub notes_for {
  my ($name) = @_;

  my $home = $saved->{$name}{home} // 'CPAN';

  if ($home eq 'CPAN') {
    return cpan_notes($name);
  } elsif ($home eq 'GitHub') {
    return gh_notes($name);
  }

  return ("not hosted at CPAN, but at $home");
}

sub rt_data {
  state %rt_data;
  unless (%rt_data) {
    my $res = $ua->get(
      'https://rt.cpan.org/Public/bugs-per-dist.json'
    );
    die "Can't get RT bug count JSON" unless $res->is_success;
    my $bug_count = $JSON->decode($res->decoded_content);
    for my $name (@projects) {
      next unless $bug_count->{$name};
      $rt_data{ $name } = {
        open    => 0,
        stalled => 0,
      };

      $rt_data{ $name }{open} = $bug_count->{$name}{counts}{active}
                              - $bug_count->{$name}{counts}{stalled};

      $rt_data{ $name }{stalled} = $bug_count->{$name}{counts}{stalled};
    }
  }

  return \%rt_data;
}

sub cpan_notes {
  my ($name) = @_;

  my $release = eval { $mcpan->release( $name ) };
  return ("couldn't find dist on metacpan") unless $release;

  my @notes;

  my $tracker = $release->metadata->{resources}{bugtracker};
  if (! $tracker->{web} or $tracker->{web} =~ /rt.cpan/) {
    push @notes, "still using rt.cpan.org";
  }

  my $gh_repo_name = $name;
  my $gh_user = $opt->githubid;

  my $repo = $release->metadata->{resources}{repository}{url};
  if (! $repo) {
    push @notes, "no repository on file";
  } elsif ($repo !~ /github.com/) {
    push @notes, "not using GitHub for repo";
  } elsif ($repo =~ /\Q$name/i && $repo !~ /\Q$name/) {
    $gh_repo_name = lc $name;
    push @notes, "GitHub repo is not capitalized correctly";
  } elsif ($repo =~ m{github\.com/\Q$gh_user\E/(.+?)(?:\.git)}) {
    $gh_repo_name = $1;
  } elsif ($repo =~ m{github\.com/(.+?)(?:\.git)}) {
    $gh_repo_name = $1;
  }

  push @notes, gh_notes($gh_repo_name);

  my $rt_bugs = rt_data->{$name};
  for (qw(open stalled)) {
    push @notes, "rt.cpan.org $_ ticket count: $rt_bugs->{$_}"
      if $rt_bugs->{$_};
  }

  unless (($release->metadata->{generated_by} // '') =~ /Dist::Zilla/) {
    push @notes, "dist not built with Dist::Zilla";
  }

  {
    my $res = $ua->get(
      "http://cpants.cpanauthors.org/dist/$name.json",
    );

    if ($res->is_success) {
      my $data = $JSON->decode($res->decoded_content);
      for my $result (@{ $data->{kwalitee}[0] }) {
        next if $result->{value};
        next if $result->{is_experimental};
        next if $result->{is_extra};
        push @notes, "kwalitee test failed: $result->{name}";
      }
    } else {
      push @notes, "could not get CPANTS results";
    }
  }

  return @notes;
}

sub gh_notes {
  my ($gh_repo_name) = @_;

  my @notes;

  my $gh_user = $opt->githubid;
  my $res = $gh_ua->get("https://api.github.com/repos/$gh_user/$gh_repo_name");

  unless ($res->is_success) {
    $res = $gh_ua->get("https://api.github.com/repos/$gh_repo_name");
    unless ($res->is_success) {
      return ("Couldn't get repo data for $gh_user/$gh_repo_name from GitHub");
    }
  }

  my $repo = $JSON->decode($res->decoded_content);

  push @notes, "GitHub default branch is master"
    if $repo->{default_branch} eq 'master';

  push @notes, "GitHub issues are not enabled"
    if ! $repo->{has_issues};

  push @notes, "GitHub issue count: $repo->{open_issues_count}"
    if $repo->{open_issues_count};

  return @notes;
}
