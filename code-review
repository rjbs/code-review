#!/usr/bin/env perl
use 5.18.0;
use warnings;

binmode *STDOUT, ':encoding(UTF-8)';
binmode *STDERR, ':encoding(UTF-8)';

use DateTime;
use DateTime::Format::Strptime;
use Getopt::Long::Descriptive;
use List::AllUtils qw(part);
use LWP::UserAgent;
use String::ShellQuote;
use Term::ReadKey ();
use Time::Duration::Parse;
use YAML::XS ();

use Yakker::Util qw(activityloop matesay);
use Yakker::HTTP;

use lib 'lib';
require RJBS::CodeReview;

$|++;

my @orig_argv = @ARGV;

my ($opt, $usage) = describe_options(
  '%c %o [PROJECT...]',
  [ 'rebuild'      => "rebuild the YAML file that holds state" ],
  [ 'message|m=s'  => "commit message"                         ],
  [ 'pauseid=s'    => "your PAUSE id",  { default => uc $ENV{USER} } ],
  [ 'githubid=s'   => "your GitHub id", { default =>    $ENV{USER} } ],
  [ 'tmux!'        => 'ensure running under tmux', { default => 1 } ],
  [ 'local-cpan=s' => "where's your local cpan?", { default =>
      "$ENV{HOME}/minicpan/modules/02packages.details.txt.gz" },
  ],

  [],

  [ 'rules=s'      => 'comma-separated set of skip/include names',
                      { default => 'noaliens,noorphans' } ],

  [],
  [ \<<~'END' ],
      --rules takes a comma-separated list of the following:

      noaliens  - skip CPAN dists where you have no permissions
      noorphans - skip CPAN dists where ADOPTME is first-come

      Default value: noaliens,noorphans
  END
);

my %rules;
for my $rule (split /\s*,\s*/, $opt->rules) {
  die "unknown rule in --rules: $rule\n"
    unless $rule eq 'noaliens' or $rule eq 'noorphans';

  $rules{$rule} = 1;
}

die "--message without --rebuild or --project is nonsensical"
  if $opt->message and not ($opt->rebuild or $opt->project);

if ($opt->tmux && ! $ENV{TMUX} && ! $opt->rebuild) {
  exec {'tmux'} 'tmux', 'new-session', '-n', 'code-review', "$^X $0 " . shell_quote(@orig_argv);
  die "Tried to exec tmux but we're still here.  What?!\n";
}

my $mate = RJBS::CodeReview->new({
  http_agent => Yakker::HTTP->new,
  github_id  => $opt->githubid,
});

my $res = $mate->http_agent->do_request(
  uri      => 'https://fastapi.metacpan.org/release/latest_by_author/RJBS',
  yakker_label => "consulting MetaCPAN",
)->get;

die "Can't get latest CPAN releases" unless $res->is_success;
my $releases = $mate->decode_json_res($res);

my %is_tracked = map {; $_ => ($mate->_state->{$_}{review} // '') ne 'never' }
                 keys $mate->_state->%*;

my $dist = $mate->dist;

DIST: for my $d ($releases->{releases}->@*) {
  my $name = $d->{distribution};
  next if $name eq 'perl';

  $is_tracked{$name} = 1 unless exists $is_tracked{$name};
  $dist->{ $name } = $d;
}

our @projects = grep {; $is_tracked{$_} } keys %is_tracked;

my $strp = DateTime::Format::Strptime->new(
  pattern   => '%F',
  locale    => 'en_US',
  time_zone => 'local',
);

my ($undue, $due) = part {
  return 0 unless my $rev = $mate->_state->{$_}{'review-every'};
  die "can't parse duration $rev\n" unless my $dur = parse_duration($rev);
  return 1 if ! $mate->_state->{$_}{'last-review'};
  my $last_done = $strp->parse_datetime($mate->_state->{$_}{'last-review'})
                       ->epoch;
  return 1 if time - $last_done > $dur;
  return 0;
} @projects;

@projects = (@{ $due // [] }, sort {
  ($mate->_state->{$a}{'last-review'} // 0)
  cmp
  ($mate->_state->{$b}{'last-review'} // 0)

  ||

  fc $a cmp fc $b
} @$undue);

my @to_consider = @projects;

if (@ARGV) {
  my @missing = grep {; ! ($is_tracked{$_} or $mate->_state->{$_}) } @ARGV;
  die "these projects that you asked about are unknown: @missing\n"
    if @missing;
  @to_consider = @ARGV;
}

if (!@ARGV && %rules) {
  my $res = $mate->http_agent->do_request(
    uri => 'https://www.cpan.org/modules/06perms.txt',
    yakker_label => "consulting CPAN",
  )->get;

  die "Can't get latest CPAN 06perms" unless $res->is_success;
  my @perms_lines = split /\n/, $res->decoded_content;

  my %perm;
  for my $line (@perms_lines) {
    next unless $line =~ /,[a-z]\z/;
    my ($pm, $owner, $type) = split /,/, $line;

    $perm{$pm}{$owner} = $type;
  }

  my @keep;
  PROJECT: for my $project (@to_consider) {
    my $pm_name = $project =~ s/-/::/gr;
    my $perms   = $perm{$pm_name};

    if ($rules{noorphans}) {
      next PROJECT if $perms && ($perms->{ADOPTME}//'') eq 'f';
    }

    if ($rules{noaliens}) {
      next PROJECT if $perms && ! $perms->{ $opt->pauseid };
    }

    push @keep, $project;
  }

  @to_consider = @keep;
}

if ($opt->rebuild) {
  $mate->_commit_state;
  exit;
}

$mate->set_projects(\@projects);
$mate->set_filtered_projects(\@to_consider);

activityloop($mate->activity(boot => {}));

say q{};
matesay("Good job reviewing!");

exit;
